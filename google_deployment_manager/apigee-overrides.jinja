# Copyright 2020 Google Inc. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

{% set project = env["project"] %}
{% set org =  env["project"] %}
{% set deployment = env["deployment"] %}

{% set CLUSTER_NAME = env['deployment'] + '-' + properties['k8s_cluster'].name %}
{% set DEPLOYMENT_NAME = env['deployment'] %}

resources:
- name: {{ CLUSTER_NAME }}-jumphost
  type: compute.v1.instance   
  metadata:
    dependsOn:
     - {{ CLUSTER_NAME }}
     - get-iam-policy
     - patch-iam-policy
  properties:
    zone: {{ properties['jump_host'].zone }}
    machineType: https://www.googleapis.com/compute/v1/projects/{{ env["project"] }}/zones/{{ properties["jump_host"].zone }}/machineTypes/{{ properties["jump_host"].instanceType }}
    tags:
      items:
      -  apigee-hybrid
    serviceAccounts:
      - email: "default"
        scopes:
          - https://www.googleapis.com/auth/cloud-platform
          - https://www.googleapis.com/auth/cloudplatformprojects
          - https://www.googleapis.com/auth/compute
          - https://www.googleapis.com/auth/logging.write
          - https://www.googleapis.com/auth/monitoring
          - https://www.googleapis.com/auth/servicecontrol
          - https://www.googleapis.com/auth/service.management.readonly
          - https://www.googleapis.com/auth/service.management
          - https://www.googleapis.com/auth/userinfo.email

    networkInterfaces:
    - network: https://www.googleapis.com/compute/v1/projects/{{ env["project"] }}/global/networks/default
      accessConfigs:
      - name: External NAT
        type: ONE_TO_ONE_NAT
    disks:
    - deviceName: boot
      type: PERSISTENT
      boot: true
      autoDelete: true
      initializeParams:
        diskName: {{ CLUSTER_NAME }}-jumphost-vm-disk
        sourceImage: {{ properties["jump_host"].imageType }}
    metadata:
      items:
      - key: mart_key
        value: |
          {{ imports[properties['apigee'].mart.sslKeyPath] | indent(10) }}  
      - key: mart_crt
        value: |
          {{ imports[properties['apigee'].mart.sslCertPath] | indent(10)}}
      {% for env in properties['apigee'].virtualhosts  %}
      - key: ingress_{{ env.name }}_key
        value: |
          {{ imports[ env.sslKeyPath ] | indent(10) }}
      - key: ingress_{{ env.name }}_crt
        value: |
          {{ imports[env.sslCertPath] | indent(10) }}
      {% endfor %}
      - key: startup-script
        value: |
          #!/bin/bash -x
  
          metadata_value() {
            curl --retry 5 -sfH "Metadata-Flavor: Google" \
              "http://metadata/computeMetadata/v1/$1"
          }

          wait() {
            sleep 10
          }

          export_variables() {
            export ENVS="{{ properties['apigee'].virtualhosts }}"
            export version="{{ properties['version'] }}"
            #export version2="{{ properties['version2'] }}"
            export cluster_name="{{ CLUSTER_NAME }}"
            export cluster_region="{{ properties["k8s_cluster"].location }}"
            export resource={{ DEPLOYMENT_NAME }}
            export project_id=$(gcloud config get-value project)
            export org="{{ properties['apigee'].org }}"
            if [[ "$org" == "my_project_id" ]]; then
                export org=$project_id
             fi
            export mart_dns="{{ properties['apigee'].mart.hostAlias }}"
            export connect_agent="{{ properties['apigee'].connectAgent.enabled }}"
            export connect_agent=$(echo $connect_agent | tr '[:upper:]' '[:lower:]')

          }

          prerequisites() {

             apt-get update && apt-get install -y git google-cloud-sdk curl kubectl

             #Installation steps for apigee hybrid
             mkdir -p /opt/apigee/
             mkdir -p /opt/apigee/config/
             export HOME=/opt/apigee/

             cd /opt/apigee

             version=$(echo $version)
             #version2=$(echo $version2)
             #echo $version2

             curl -LO https://storage.googleapis.com/apigee-public/apigee-hybrid-setup/$version/apigeectl_linux_64.tar.gz

             tar xvzf apigeectl_linux_64.tar.gz -C .
             mv apigeectl_1.* apigeectl
             cd ./apigeectl
             export APIGEECTL_HOME=$PWD
             
             mkdir hybrid-files
             cd hybrid-files
             mkdir overrides
             mkdir service-accounts
             mkdir certs
             
             ln -s $APIGEECTL_HOME/tools tools
             ln -s $APIGEECTL_HOME/config config
             ln -s $APIGEECTL_HOME/templates templates
             ln -s $APIGEECTL_HOME/plugins plugins
            
          }

          setup_overrides() {

            echo {{ properties['apigee'] }} >> /tmp/overrides-0.yaml
            cd /tmp

            #Install tools to manipulate overrides yaml file

            apt-get install python-yaml -y
            pip install pyyaml
            apt install python-pip -y
            apt-get install jq -y

            metadata_value "instance/attributes/mart_key" > $APIGEECTL_HOME/hybrid-files/certs/mart-server.key
            metadata_value "instance/attributes/mart_crt" > $APIGEECTL_HOME/hybrid-files/certs/mart-server.pem

            sed -i.bak "s/my_project_id/$project_id/g" overrides-0.yaml

            cat overrides-0.yaml | python -c 'import json, sys, yaml ; y=yaml.safe_load(sys.stdin.read()) ; print(json.dumps(y))' | jq . > overrides-1.json

            cat overrides-1.json  | jq '.mart.sslKeyPath = "./certs/mart-server.key"' | jq '.mart.sslCertPath = "./certs/mart-server.pem"' > overrides-2.json

            cp overrides-2.json overrides-3.json

            echo $ENVS > envs.json
            cat envs.json | python -c 'import json, sys, yaml ; y=yaml.safe_load(sys.stdin.read()) ; print(json.dumps(y))' | jq . > envs-1.json

            echo "envs-1 generated"
            wait

            for row in $(cat envs-1.json | jq -r '.[] | @base64'); 
              do
                _jq() {
                  echo ${row} | base64 --decode | jq -r ${1}
                 }

              env=$(_jq '.name')
              echo $env
              metadata_value "instance/attributes/ingress_"$env"_key" > $APIGEECTL_HOME/hybrid-files/certs/ingress-server-$env.key

              metadata_value "instance/attributes/ingress_"$env"_crt" > $APIGEECTL_HOME/hybrid-files/certs/ingress-server-$env.pem

              cat overrides-3.json | jq  --arg env $env '(.virtualhosts[] | select(.name==$env)| .sslCertPath) = "./certs/ingress-server-"+$env+".pem" | (.virtualhosts[] | select(.name==$env)| .sslKeyPath)|= "./certs/ingress-server-"+$env+".key"'  > overrides-3.tmp.json

              wait
              mv overrides-3.tmp.json overrides-3.json
              wait
          
            done

            export mart_dns=$(cat overrides-3.json | jq -r .mart.hostAlias)
            export org=$(cat overrides-3.json | jq -r .org)


            python -c 'import sys, yaml, json; yaml.safe_dump(json.load(sys.stdin), sys.stdout, default_flow_style=False)' < overrides-3.json > overrides-3.yaml

            sed -i.bak "s/my_cluster_name/$cluster_name/g" overrides-3.yaml
            sed -i.bak "s/my_cluster_region/$cluster_region/g" overrides-3.yaml

            wait

            cp /tmp/overrides-3.yaml $APIGEECTL_HOME/hybrid-files/overrides/overrides.yaml

          }

          
          create_service_accounts_keys() {
            
            cd $APIGEECTL_HOME/hybrid-files/service-accounts/

            uniqueId=$(gcloud beta runtime-config configs variables get-value  --config-name $resource-apigee-config uniqueId)

            gcloud iam service-accounts keys create ./$project_id-admin.json --iam-account $resource-$uniqueId-admin@$project_id.iam.gserviceaccount.com

            gcloud iam service-accounts keys create ./$project_id-metrics-apigee.json --iam-account $resource-$uniqueId-metrics@$project_id.iam.gserviceaccount.com

            gcloud iam service-accounts keys create ./$project_id-synchronizer-apigee.json --iam-account $resource-$uniqueId-synchronizer@$project_id.iam.gserviceaccount.com

            gcloud iam service-accounts keys create  ./$project_id-udca-apigee.json --iam-account $resource-$uniqueId-udca@$project_id.iam.gserviceaccount.com

            gcloud iam service-accounts keys create ./$project_id-cassandra-apigee.json --iam-account $resource-$uniqueId-cassandra@$project_id.iam.gserviceaccount.com

            gcloud iam service-accounts keys create ./$project_id-mart-apigee.json --iam-account $resource-$uniqueId-mart@$project_id.iam.gserviceaccount.com

            gcloud iam service-accounts keys create ./$project_id-connect-apigee.json --iam-account $resource-$uniqueId-connect@$project_id.iam.gserviceaccount.com

            wait
          }


          setup_env_synch_and_mart() {

            export GOOGLE_APPLICATION_CREDENTIALS=$APIGEECTL_HOME/hybrid-files/service-accounts/$project_id-admin.json 
            export TOKEN=$(gcloud auth application-default print-access-token)

            postDataJson="{\"identities\":[\"serviceAccount:$resource-$uniqueId-synchronizer@$project_id.iam.gserviceaccount.com\"]}"

            echo $postDataJson

            curl -X POST -H "Authorization: Bearer $TOKEN" -H "Content-Type:application/json" "https://apigee.googleapis.com/v1/organizations/$org:setSyncAuthorization" -d ${postDataJson}

            curl -X POST -H "Content-Type:application/json" -H "Authorization: Bearer $TOKEN"  "https://apigee.googleapis.com/v1/organizations/$org:getSyncAuthorization" -d ''

            
            curl  -X PUT https://apigee.googleapis.com/v1/organizations/$org -H "Content-Type: application/json" -H "Authorization: Bearer $TOKEN" -d "{\"name\" : \"$org\",\"properties\" : {\"property\" : [ {\"name\" :\"features.hybrid.enabled\",\"value\" : \"true\"}, {\"name\" : \"features.mart.server.endpoint\",\"value\" : \"https://$mart_dns\"}]}}"

            if [[ "$connect_agent" == "true" ]]; then

            curl  -X PUT https://apigee.googleapis.com/v1/organizations/$org -H "Content-Type: application/json" -H "Authorization: Bearer $TOKEN" -d "{\"name\" : \"$org\",\"properties\" : {\"property\" : [ {\"name\" :\"features.hybrid.enabled\",\"value\" : \"true\"}, {\"name\" : \"features.mart.server.endpoint\",\"value\" : \"https://$mart_dns\"}, {\"name\" :\"features.mart.apigee.connect.enabled\",\"value\" : \"$connect_agent\"}]}}"

            fi

            cd /tmp
            echo $ENVS > envs.json
            cat envs.json | python -c 'import json, sys, yaml ; y=yaml.safe_load(sys.stdin.read()) ; print(json.dumps(y))' | jq . > envs-1.json
            wait

            for row in $(cat envs-1.json | jq -r '.[] | @base64'); 
              do
                _jq() {
                  echo ${row} | base64 --decode | jq -r ${1}
                 }
              env=$(_jq '.name')
              echo $env

              curl -X POST -H "Content-Type:application/json" -H "Authorization: Bearer $TOKEN"  "https://apigee.googleapis.com/v1/organizations/$org/environments" -d "{\"name\" : \"$env\"}"
            done
          }

          check_status() {
            counter=$1
            rm -fr /tmp/container_status.txt
            $APIGEECTL_HOME/apigeectl check-ready -f overrides/overrides.yaml > /tmp/container_status.txt  2>&1
            container_status=$(cat /tmp/container_status.txt)

            if [ "$counter" == "10" ]; then 
                return 
            fi
            next_count=$(($counter + 1))
            echo $next_count
            if [[ "$container_status" =~ .*"All containers are ready".* ]]; then
                echo "Containers are ready"
                sleep 30

            else 
                echo "Containers are not ready"
                sleep 60
                check_status $next_count
            fi
            rm -fr /tmp/container_status.txt
            return
          }

          install_hybrid() {

            gcloud container clusters get-credentials {{ CLUSTER_NAME }} --zone {{ properties['k8s_cluster'].zone }}

            kubectl create clusterrolebinding cluster-admin-binding --clusterrole=cluster-admin --user=$(gcloud config get-value core/account)
          
            cd $APIGEECTL_HOME/hybrid-files/
         
            $APIGEECTL_HOME/apigeectl init -f overrides/overrides.yaml
            #Check for All Containers Ready
            #$APIGEECTL_HOME/apigeectl check-ready -f overrides/overrides.yaml
            check_status 0

            $APIGEECTL_HOME/apigeectl apply -f overrides/overrides.yaml --dry-run=true
            sleep 20
            $APIGEECTL_HOME/apigeectl apply -f overrides/overrides.yaml
            $APIGEECTL_HOME/apigeectl check-ready -f overrides/overrides.yaml

            #Check fot All Containers Ready
            check_status 0

          }

          release_lock() {
            gcloud beta runtime-config configs variables set success/{{ CLUSTER_NAME }}-waiter success --config-name $(ref.{{ CLUSTER_NAME }}-config.name)
          }

          delete_me() {

             deleteAfterSetup="{{ properties['jump_host'].deleteAfterSetup }}"
             deleteAfterSetup= $(echo $deleteAfterSetup | tr '[:upper:]' '[:lower:]')

             if [[ "$deleteAfterSetup" == "true" ]]; then
                gcloud -q compute instances delete {{ CLUSTER_NAME }}-jumphost --zone {{ properties['zone'] }}
             fi
          }


          export_variables
          prerequisites
          setup_overrides
          create_service_accounts_keys
          setup_env_synch_and_mart
          install_hybrid
          release_lock
          delete_me

